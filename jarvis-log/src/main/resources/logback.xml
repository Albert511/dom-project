<?xml version="1.0" encoding="UTF-8" ?>
<!-- https://www.iteye.com/blog/aub-1103685 可参考这篇文章-->
<!-- 级别从高到低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时会输出 -->
<!-- 以下每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter过滤只记录本级别的日志 -->
<!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!-- 动态日志级别，可以动态来修改日志级别 -->
    <jmxConfigurator/>

    <!-- 定义常量，类似与key-value的形式，log.filePath作为日志文件的输出路径，之后用${log.filePath}取出-->
    <property name="log.filePath" value="D:/Develop/log"/>
    <!--    <property name="log.filePath" value="./"/>-->
    <!-- 定义日志文件的输出文件名-->
    <property name="log.fileName" value="test-demo"/>
    <!-- 定义常量log.maxHistory，日志最大的历史 30天 -->
    <property name="log.maxHistory" value="30"/>
    <!-- 定义日志根级别，默认是DEBUG级别，我们也可以主动去定义，在下面会用到-->
    <property name="log.level" value="trace"/>
    <!-- 定义日志文件最大的大小-->
    <property name="log.maxSize" value="100MB"/>
    <!-- 设置日志输出格式 -->
    <!--    <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) -&#45;&#45; [%15.15(%thread)] %cyan(%-40.40(%logger{40})) : %msg%n</pattern>-->
    <!--
    %d{yyyy-MM-dd HH:mm:ss.SSS}：日期
          %-5level：日志级别
          %highlight()：颜色，info为蓝色，warn为浅红，error为加粗红，debug为黑色
          %thread：打印日志的线程
          %15.15():如果记录的线程字符长度小于15(第一个)则用空格在左侧补齐,如果字符长度大于15(第二个),则从开头开始截断多余的字符 
          %logger：日志输出的类名
          %-40.40()：如果记录的logger字符长度小于40(第一个)则用空格在右侧补齐,如果字符长度大于40(第二个),则从开头开始截断多余的字符
          %cyan：颜色
          %msg：日志输出内容
          %n：换行符-->
    <!-- %highlight():颜色，info为蓝色，warn为浅红，error为加粗红，debug为黑色-->
    <property name="log.pattern"
              value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%highlight(%-5level)] [%thread] [%cyan(%logger:%line)] %msg%n"/>
    <!--        value="%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight([%-5level]) [%thread] %cyan(%caller{1}) :%msg%n"/>-->

    <!-- ConsoleAppender 控制台输出日志 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 默认情况下，每个日志事件都会立即刷新到基础输出流。 这种默认方法更安全，因为如果应用程序在没有正确关闭appender
        的情况下退出，则日志事件不会丢失。但是，为了显着增加日志记录吞吐量，您可能希望将immediateFlush属性设置为false -->
        <!--        <immediateFlush>true</immediateFlush>-->
        <encoder>
            <pattern>${log.pattern}</pattern>
            <!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- ERROR级别日志 -->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志拆分记录到其他文件 RollingFileAppender -->
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，只记录WARN级别的日志 -->
        <!-- 过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>ERROR</level>
            <!-- 用于配置符合过滤条件的操作,超过ERROR级别的日志输出到日志文件当中-->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作，没超过ERROR级别的日志进行拦截 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责触发滚动， 即可以根据时间和文件大小进行拆分 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志输出位置 可相对、和绝对路径 -->
            <fileNamePattern>
                <!-- 下面中的%d表示安装天进行拆分日志文件，%i表示当某一天中日志文件大小超过 MaxFileSize标签规定的大小，i的取值会从1，2，3.....n这样的进行命令差分后的文件-->
                ${log.filePath}/error/%d{yyyy-MM-dd}/${log.fileName}-%i.log
            </fileNamePattern>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件,假设设置每个月滚动，且<maxHistory>是30天，
            则只保存最近30天的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
            <maxHistory>${log.maxHistory}</maxHistory>
            <!--按照文件大小进行拆分,默认值是10MB-->
            <MaxFileSize>${log.maxSize}</MaxFileSize>
            <!-- 每个日志文件到10mb的时候开始切分，最多保留30天，但最大到20GB，哪怕没到30天也要删除多余的日志 -->
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <!-- 设置日志输出格式 -->
        <encoder>
            <pattern>${log.pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--是否追加到文件末尾,默认为true-->
        <!--        <append>true</append>-->
    </appender>

    <!-- INFO级别日志 appender -->
    <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.filePath}/info/%d{yyyy-MM-dd}/${log.fileName}-%i.log</fileNamePattern>
            <maxHistory>${log.maxHistory}</maxHistory>
            <MaxFileSize>${log.maxSize}</MaxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>


    <!-- DEBUG级别日志 appender -->
    <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.filePath}/debug/%d{yyyy-MM-dd}/${log.fileName}-%i.log</fileNamePattern>
            <maxHistory>${log.maxHistory}</maxHistory>
            <MaxFileSize>${log.maxSize}</MaxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--设置一个向上传递的appender,所有级别的日志都会输出-->
    <appender name="ALL" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.filePath}/Jarvis/%d{yyyy-MM-dd}/${log.fileName}-%i.log</fileNamePattern>
            <maxHistory>${log.maxHistory}</maxHistory>
            <MaxFileSize>${log.maxSize}</MaxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- root级别   DEBUG -->
    <root>
        <!-- 打印debug级别日志及以上级别日志 -->
        <level value="${log.level}"/>
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ALL"/>
        <appender-ref ref="DEBUG"/>
        <appender-ref ref="INFO"/>
        <appender-ref ref="WARN"/>
        <appender-ref ref="ERROR"/>
    </root>

    <!-- name:用来指定受此logger约束的某一个包或者具体的某一个类。
    level:用来设置打印级别（日志级别），大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
    还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。
    additivity:是否向上级logger传递打印信息。默认是true。指定输出的某个地方时改成false -->
    <!--com.dom.jarvis.log包下的类的日志输出,说白了就是指定输出到什么地方-->
    <!--    <logger name="com.dom.jarvis.log" additivity="false" level="INFO">-->
    <!--        <appender-ref ref="ALL"/>-->
    <!--    </logger>-->

    <!--    com.dom包下的类的日志输出-->
    <!--        <logger name="com.dom" additivity="false" level="DEBUG">-->
    <!--            <appender-ref ref="ALL"/>-->
    <!--            &lt;!&ndash;打印控制台&ndash;&gt;-->
    <!--            <appender-ref ref="CONSOLE"/>-->
    <!--        </logger>-->


</configuration>



